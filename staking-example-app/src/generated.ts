// Generated by @wagmi/cli@0.1.2 on 1/30/2023 at 1:17:19 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20StakingPoolPerpetual
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export const erc20StakingPoolPerpetualABI = [
  { type: 'error', inputs: [], name: 'Error_AlreadyInitialized' },
  { type: 'error', inputs: [], name: 'Error_AmountTooLarge' },
  { type: 'error', inputs: [], name: 'Error_NotRewardDistributor' },
  { type: 'error', inputs: [], name: 'Error_ZeroOwner' },
  { type: 'error', inputs: [], name: 'Ownable_NewOwnerZeroAddress' },
  { type: 'error', inputs: [], name: 'Ownable_NotOwner' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'reward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardPaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardRateSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Staked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'earned',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'exit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getReward',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initialOwner', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isRewardDistributor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastTimeRewardApplicable',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastUpdateTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardPerToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardPerTokenStored',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'rewardToken',
    outputs: [
      { name: 'rewardToken_', internalType: 'contract ERC20', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'rewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ERC20', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ERC20', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermitIfNecessary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rewardDistributor', internalType: 'address', type: 'address' },
      { name: 'isRewardDistributor_', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRewardDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'rate', internalType: 'uint256', type: 'uint256' }],
    name: 'setRewardRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'stake',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'stakeToken',
    outputs: [
      { name: 'stakeToken_', internalType: 'contract ERC20', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'userRewardPerTokenPaid',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export const erc20StakingPoolPerpetualAddress = {
  5: '0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077',
} as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export const erc20StakingPoolPerpetualConfig = {
  address: erc20StakingPoolPerpetualAddress,
  abi: erc20StakingPoolPerpetualABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StakeToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export const stakeTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'owner_', internalType: 'address', type: 'address' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'faucetMint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isMinter',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'lastFaucetMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newMinter', internalType: 'address', type: 'address' },
      { name: 'canMint', internalType: 'bool', type: 'bool' },
    ],
    name: 'setMinter',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export const stakeTokenAddress = {
  5: '0x5602a463b1C124a231261B4A42c0F11C830aACEF',
} as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export const stakeTokenConfig = {
  address: stakeTokenAddress,
  abi: stakeTokenABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetual(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof erc20StakingPoolPerpetualAddress
  } = {} as any,
) {
  return useContract({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    ...config,
  } as UseContractReadConfig<
    typeof erc20StakingPoolPerpetualABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'balanceOf'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"earned"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualEarned(
  config: Omit<
    UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'earned'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'earned',
    ...config,
  } as UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'earned'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"isRewardDistributor"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualIsRewardDistributor(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StakingPoolPerpetualABI,
      'isRewardDistributor'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'isRewardDistributor',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StakingPoolPerpetualABI,
    'isRewardDistributor'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"lastTimeRewardApplicable"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualLastTimeRewardApplicable(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StakingPoolPerpetualABI,
      'lastTimeRewardApplicable'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'lastTimeRewardApplicable',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StakingPoolPerpetualABI,
    'lastTimeRewardApplicable'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"lastUpdateTime"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualLastUpdateTime(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StakingPoolPerpetualABI,
      'lastUpdateTime'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'lastUpdateTime',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StakingPoolPerpetualABI,
    'lastUpdateTime'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualOwner(
  config: Omit<
    UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'owner'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"rewardPerToken"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualRewardPerToken(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StakingPoolPerpetualABI,
      'rewardPerToken'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'rewardPerToken',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StakingPoolPerpetualABI,
    'rewardPerToken'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"rewardPerTokenStored"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualRewardPerTokenStored(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StakingPoolPerpetualABI,
      'rewardPerTokenStored'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'rewardPerTokenStored',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StakingPoolPerpetualABI,
    'rewardPerTokenStored'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"rewardRate"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualRewardRate(
  config: Omit<
    UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'rewardRate'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'rewardRate',
    ...config,
  } as UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'rewardRate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"rewardToken"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualRewardToken(
  config: Omit<
    UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'rewardToken'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'rewardToken',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StakingPoolPerpetualABI,
    'rewardToken'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"rewards"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualRewards(
  config: Omit<
    UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'rewards'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'rewards',
    ...config,
  } as UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'rewards'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"stakeToken"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualStakeToken(
  config: Omit<
    UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'stakeToken'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'stakeToken',
    ...config,
  } as UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'stakeToken'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"totalSupply"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20StakingPoolPerpetualABI, 'totalSupply'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StakingPoolPerpetualABI,
    'totalSupply'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"userRewardPerTokenPaid"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualUserRewardPerTokenPaid(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StakingPoolPerpetualABI,
      'userRewardPerTokenPaid'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractRead({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'userRewardPerTokenPaid',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StakingPoolPerpetualABI,
    'userRewardPerTokenPaid'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          string
        >['abi'],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        TFunctionName
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20StakingPoolPerpetualABI,
    TFunctionName
  >({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"exit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualExit<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          'exit'
        >['abi'],
        'exit'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'exit' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        'exit'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'exit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20StakingPoolPerpetualABI, 'exit'>({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'exit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"getReward"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualGetReward<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          'getReward'
        >['abi'],
        'getReward'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'getReward'
      }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        'getReward'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'getReward'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20StakingPoolPerpetualABI,
    'getReward'
  >({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'getReward',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualInitialize<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          'initialize'
        >['abi'],
        'initialize'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'initialize'
      }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        'initialize'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20StakingPoolPerpetualABI,
    'initialize'
  >({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"multicall"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualMulticall<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          'multicall'
        >['abi'],
        'multicall'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'multicall'
      }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        'multicall'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20StakingPoolPerpetualABI,
    'multicall'
  >({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"selfPermit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualSelfPermit<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          'selfPermit'
        >['abi'],
        'selfPermit'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'selfPermit'
      }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        'selfPermit'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'selfPermit'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20StakingPoolPerpetualABI,
    'selfPermit'
  >({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'selfPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"selfPermitIfNecessary"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualSelfPermitIfNecessary<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          'selfPermitIfNecessary'
        >['abi'],
        'selfPermitIfNecessary'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'selfPermitIfNecessary'
      }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        'selfPermitIfNecessary'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'selfPermitIfNecessary'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20StakingPoolPerpetualABI,
    'selfPermitIfNecessary'
  >({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'selfPermitIfNecessary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"setRewardDistributor"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualSetRewardDistributor<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          'setRewardDistributor'
        >['abi'],
        'setRewardDistributor'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setRewardDistributor'
      }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        'setRewardDistributor'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setRewardDistributor'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20StakingPoolPerpetualABI,
    'setRewardDistributor'
  >({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'setRewardDistributor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"setRewardRate"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualSetRewardRate<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          'setRewardRate'
        >['abi'],
        'setRewardRate'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setRewardRate'
      }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        'setRewardRate'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setRewardRate'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20StakingPoolPerpetualABI,
    'setRewardRate'
  >({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'setRewardRate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"stake"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualStake<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          'stake'
        >['abi'],
        'stake'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'stake'
      }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        'stake'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'stake'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20StakingPoolPerpetualABI, 'stake'>({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'stake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualTransferOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        'transferOwnership'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20StakingPoolPerpetualABI,
    'transferOwnership'
  >({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"withdraw"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualWithdraw<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof erc20StakingPoolPerpetualAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20StakingPoolPerpetualABI,
          'withdraw'
        >['abi'],
        'withdraw'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'withdraw'
      }
    : UseContractWriteConfig<
        TMode,
        typeof erc20StakingPoolPerpetualABI,
        'withdraw'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20StakingPoolPerpetualABI,
    'withdraw'
  >({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StakingPoolPerpetualABI,
      TFunctionName
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"exit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StakingPoolPerpetualABI, 'exit'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'exit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    'exit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"getReward"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualGetReward(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StakingPoolPerpetualABI,
      'getReward'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'getReward',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    'getReward'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StakingPoolPerpetualABI,
      'initialize'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"multicall"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StakingPoolPerpetualABI,
      'multicall'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    'multicall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"selfPermit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualSelfPermit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StakingPoolPerpetualABI,
      'selfPermit'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'selfPermit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    'selfPermit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"selfPermitIfNecessary"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualSelfPermitIfNecessary(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StakingPoolPerpetualABI,
      'selfPermitIfNecessary'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'selfPermitIfNecessary',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    'selfPermitIfNecessary'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"setRewardDistributor"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualSetRewardDistributor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StakingPoolPerpetualABI,
      'setRewardDistributor'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'setRewardDistributor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    'setRewardDistributor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"setRewardRate"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualSetRewardRate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StakingPoolPerpetualABI,
      'setRewardRate'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'setRewardRate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    'setRewardRate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"stake"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StakingPoolPerpetualABI, 'stake'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'stake',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    'stake'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StakingPoolPerpetualABI,
      'transferOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `functionName` set to `"withdraw"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function usePrepareErc20StakingPoolPerpetualWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StakingPoolPerpetualABI,
      'withdraw'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StakingPoolPerpetualABI,
    'withdraw'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20StakingPoolPerpetualABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractEvent({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    ...config,
  } as UseContractEventConfig<typeof erc20StakingPoolPerpetualABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20StakingPoolPerpetualABI,
      'OwnershipTransferred'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractEvent({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof erc20StakingPoolPerpetualABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `eventName` set to `"RewardPaid"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualRewardPaidEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StakingPoolPerpetualABI, 'RewardPaid'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractEvent({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    eventName: 'RewardPaid',
    ...config,
  } as UseContractEventConfig<
    typeof erc20StakingPoolPerpetualABI,
    'RewardPaid'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `eventName` set to `"RewardRateSet"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualRewardRateSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20StakingPoolPerpetualABI,
      'RewardRateSet'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractEvent({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    eventName: 'RewardRateSet',
    ...config,
  } as UseContractEventConfig<
    typeof erc20StakingPoolPerpetualABI,
    'RewardRateSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `eventName` set to `"Staked"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualStakedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StakingPoolPerpetualABI, 'Staked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractEvent({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    eventName: 'Staked',
    ...config,
  } as UseContractEventConfig<typeof erc20StakingPoolPerpetualABI, 'Staked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StakingPoolPerpetualABI}__ and `eventName` set to `"Withdrawn"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1419e30Dea178D0eD0aF8fE56ba1A7820f49A077)
 */
export function useErc20StakingPoolPerpetualWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StakingPoolPerpetualABI, 'Withdrawn'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof erc20StakingPoolPerpetualAddress } = {} as any,
) {
  return useContractEvent({
    abi: erc20StakingPoolPerpetualABI,
    address: erc20StakingPoolPerpetualAddress[5],
    eventName: 'Withdrawn',
    ...config,
  } as UseContractEventConfig<typeof erc20StakingPoolPerpetualABI, 'Withdrawn'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stakeTokenABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeToken(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof stakeTokenAddress
  } = {} as any,
) {
  return useContract({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"allowance"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenAllowance(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, 'allowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, 'allowance'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, 'balanceOf'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"decimals"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenDecimals(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, 'decimals'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, 'decimals'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"isMinter"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenIsMinter(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, 'isMinter'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'isMinter',
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, 'isMinter'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"lastFaucetMint"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenLastFaucetMint(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, 'lastFaucetMint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'lastFaucetMint',
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, 'lastFaucetMint'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"name"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenName(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, 'name'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"nonces"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenNonces(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, 'nonces'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenOwner(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, 'owner'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"symbol"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenSymbol(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, 'symbol'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"totalSupply"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof stakeTokenABI, 'totalSupply'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof stakeTokenABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTokenABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof stakeTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTokenABI, string>['abi'],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof stakeTokenABI, TFunctionName> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<TMode, typeof stakeTokenABI, TFunctionName>({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenApprove<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof stakeTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTokenABI, 'approve'>['abi'],
        'approve'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'approve'
      }
    : UseContractWriteConfig<TMode, typeof stakeTokenABI, 'approve'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof stakeTokenABI, 'approve'>({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"faucetMint"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenFaucetMint<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof stakeTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTokenABI, 'faucetMint'>['abi'],
        'faucetMint'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'faucetMint'
      }
    : UseContractWriteConfig<TMode, typeof stakeTokenABI, 'faucetMint'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'faucetMint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof stakeTokenABI, 'faucetMint'>({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'faucetMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"mint"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenMint<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof stakeTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTokenABI, 'mint'>['abi'],
        'mint'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof stakeTokenABI, 'mint'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof stakeTokenABI, 'mint'>({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"permit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenPermit<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof stakeTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTokenABI, 'permit'>['abi'],
        'permit'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'permit'
      }
    : UseContractWriteConfig<TMode, typeof stakeTokenABI, 'permit'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof stakeTokenABI, 'permit'>({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"setMinter"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenSetMinter<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof stakeTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTokenABI, 'setMinter'>['abi'],
        'setMinter'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setMinter'
      }
    : UseContractWriteConfig<TMode, typeof stakeTokenABI, 'setMinter'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMinter'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof stakeTokenABI, 'setMinter'>({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'setMinter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"transfer"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenTransfer<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof stakeTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTokenABI, 'transfer'>['abi'],
        'transfer'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'transfer'
      }
    : UseContractWriteConfig<TMode, typeof stakeTokenABI, 'transfer'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof stakeTokenABI, 'transfer'>({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenTransferFrom<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof stakeTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof stakeTokenABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof stakeTokenABI, 'transferFrom'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof stakeTokenABI, 'transferFrom'>({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenTransferOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof stakeTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof stakeTokenABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        TMode,
        typeof stakeTokenABI,
        'transferOwnership'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof stakeTokenABI, 'transferOwnership'>({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTokenABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function usePrepareStakeTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTokenABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function usePrepareStakeTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTokenABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"faucetMint"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function usePrepareStakeTokenFaucetMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTokenABI, 'faucetMint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'faucetMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeTokenABI, 'faucetMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"mint"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function usePrepareStakeTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTokenABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeTokenABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"permit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function usePrepareStakeTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTokenABI, 'permit'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeTokenABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"setMinter"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function usePrepareStakeTokenSetMinter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTokenABI, 'setMinter'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'setMinter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeTokenABI, 'setMinter'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"transfer"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function usePrepareStakeTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTokenABI, 'transfer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function usePrepareStakeTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTokenABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakeTokenABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function usePrepareStakeTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakeTokenABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakeTokenABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTokenABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof stakeTokenABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    ...config,
  } as UseContractEventConfig<typeof stakeTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTokenABI}__ and `eventName` set to `"Approval"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTokenABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof stakeTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTokenABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof stakeTokenABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakeTokenABI}__ and `eventName` set to `"Transfer"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5602a463b1C124a231261B4A42c0F11C830aACEF)
 */
export function useStakeTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof stakeTokenABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof stakeTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: stakeTokenABI,
    address: stakeTokenAddress[5],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof stakeTokenABI, 'Transfer'>)
}
